{"version":3,"file":"static/js/505.24d8e06c.chunk.js","mappings":"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","sources":["app/recoil/searchQueries.ts","app/pages/HomePage/index.tsx","app/actions/search.action.ts","app/actions/pokedex.action.ts"],"sourcesContent":["import { atom } from 'recoil'\nimport { recoilPersist } from 'recoil-persist'\n\nconst { persistAtom } = recoilPersist()\n\nexport const emptySearchQueriesRecoilState = {}\n\nexport const searchQueriesState = atom({\n  key: 'searchQueriesState', // unique ID (with respect to other atoms/selectors)\n  default: emptySearchQueriesRecoilState, // default value (aka initial value)\n  effects: [persistAtom],\n})\n","import { Box, Button, FormLabel, TextField } from '@mui/material'\nimport {\n  FETCH_POKEDEX_ERROR,\n  FETCH_POKEDEX_REQUEST,\n  FETCH_POKEDEX_SUCCESS,\n} from '../../constants/pokedex.constants'\nimport React, { Fragment, Suspense, lazy, useCallback, useEffect, useRef, useState } from 'react'\nimport { SEARCH_ERROR, SEARCH_SUCCESS } from '../../constants/search.constants'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { RootState } from '../../reducers'\nimport Spinner from 'react-spinner'\nimport { fetchPokemonsAction } from '../../actions/pokedex.action'\nimport isEmpty from 'lodash/isEmpty'\nimport { searchAction } from '../../actions/search.action'\nimport { searchQueriesState } from '../../recoil/searchQueries'\nimport { useNavigate } from 'react-router-dom'\nimport { useRecoilState } from 'recoil'\nimport { useTranslation } from 'react-i18next'\n\n// Lazy Load\nconst PokemonGrid = lazy(() => import('../../components/PokemonGrid'))\nconst ErrorToast = lazy(() => import('../../components/ErrorToast'))\n\nconst HomePage: React.FunctionComponent = () => {\n  const { t } = useTranslation(['common'])\n  const navigate = useNavigate()\n  const dispatch = useDispatch()\n\n  const anchorRef = useRef(null)\n  const [query, setQuery] = useState('')\n  const [searchError, setSearchError] = useState('')\n  const [searching, setSearching] = useState(false)\n\n  const [searchQueries, setSearchQueries] = useRecoilState(searchQueriesState)\n\n  const search = () => {\n    setSearching(true)\n    const url = `https://pokeapi.co/api/v2/pokemon/${query.toLowerCase()}`\n\n    searchAction(url)\n      .then((res) => {\n        dispatch({\n          type: SEARCH_SUCCESS,\n          payload: res,\n        })\n\n        setSearching(false)\n\n        setSearchQueries((prev: any) => ({ ...prev, [query.toLowerCase()]: query }))\n        navigate(`/pokedex-react/pokemon/${query.toLowerCase()}`)\n      })\n      .catch((err) => {\n        dispatch({\n          type: SEARCH_ERROR,\n          payload: 'Oops! Something went wrong. Please try again later.',\n        })\n\n        setSearchError(t('common:errors.search-error'))\n        setSearching(false)\n      })\n  }\n\n  const { pokemonList, url, error, loading } = useSelector((state: RootState) => ({\n    pokemonList: state.pokedex.pokemonList,\n    url: state.pokedex.url,\n    error: state.pokedex.error,\n    loading: state.pokedex.loading,\n  }))\n\n  const handleFetch = useCallback(() => {\n    dispatch({\n      type: FETCH_POKEDEX_REQUEST,\n    })\n\n    fetchPokemonsAction(url)\n      .then((res) => {\n        dispatch({\n          type: FETCH_POKEDEX_SUCCESS,\n          payload: res,\n        })\n      })\n      .catch((err) => {\n        dispatch({\n          type: FETCH_POKEDEX_ERROR,\n          payload: 'Oops! Something went wrong. Please try again later.',\n        })\n      })\n  }, [url])\n\n  useEffect(() => {\n    if (isEmpty(pokemonList)) {\n      handleFetch()\n    }\n  }, [])\n\n  return (\n    <Fragment>\n      <Box\n        sx={{\n          display: 'flex',\n          flexDirection: 'column',\n          flex: 1,\n          alignItems: 'center',\n        }}\n      >\n        <Box sx={{ display: 'flex', gap: '1rem', flexDirection: 'column', alignItems: 'center' }}>\n          <Box\n            sx={{\n              fontSize: { xs: '1.85rem', lg: '2.5rem' },\n              maxWidth: '24ch',\n              fontWeight: 'bold',\n              textAlign: 'center',\n            }}\n          >\n            Enter a Pokemon name to view in detail\n          </Box>\n          <Box\n            sx={{\n              display: 'flex',\n              paddingX: '1rem',\n              gap: '1rem',\n              alignItems: 'center',\n              flexDirection: { xs: 'column', lg: 'row' },\n            }}\n            ref={anchorRef}\n          >\n            <Box sx={{ display: 'flex', gap: '1rem', alignItems: 'center', position: 'relative' }}>\n              <TextField\n                id=\"searchField\"\n                placeholder=\"Search\"\n                variant=\"outlined\"\n                sx={{ backgroundColor: 'white', borderRadius: '5px', width: '20rem' }}\n                onChange={(e) => {\n                  setQuery(e.target.value)\n                }}\n                onKeyDown={(e) => {\n                  if (e.key === 'Enter' && !e.shiftKey) {\n                    e.preventDefault()\n                    e.stopPropagation()\n                    search()\n                  }\n                }}\n                value={query}\n                error={!!searchError}\n              />\n              {searchError && (\n                <FormLabel sx={{ color: 'red', position: 'absolute', bottom: '-24px' }}>\n                  {searchError}\n                </FormLabel>\n              )}\n            </Box>\n            <Button\n              disabled={searching || !query}\n              type=\"submit\"\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={search}\n              sx={{ display: 'flex' }}\n            >\n              Submit\n            </Button>\n          </Box>\n          <Box\n            sx={{\n              display: 'flex',\n              padding: '1rem',\n              gap: '1rem',\n              alignItems: 'center',\n            }}\n          >\n            {searchQueries && (\n              <Box\n                sx={{\n                  display: 'flex',\n                  alignItems: 'center',\n                  flexDirection: 'column',\n                  gap: '1rem',\n                  maxWidth: { xs: 'calc(100% - 2rem)', lg: '80rem' },\n                }}\n              >\n                <Box\n                  sx={{\n                    fontWeight: 'semibold',\n                    maxWidth: { xs: '24ch', lg: '28ch' },\n                    textAlign: 'center',\n                    fontSize: { xs: '1rem', lg: '1.25rem' },\n                  }}\n                >\n                  Click on of the previous searches to view it again in detail\n                </Box>\n                <Box\n                  sx={{\n                    display: 'flex',\n                    gap: '.5rem',\n                    flexWrap: 'wrap',\n                    justifyContent: 'center',\n                  }}\n                >\n                  {Object.keys(searchQueries).map((name, index) => (\n                    <Button\n                      key={`${name}-${index}`}\n                      variant=\"contained\"\n                      color=\"success\"\n                      onClick={() => {\n                        navigate(`/pokedex-react/pokemon/${name}`)\n                      }}\n                      sx={{\n                        display: 'flex',\n                        maxWidth: 'fit-content',\n                        padding: '.5rem 1rem .25rem 1rem',\n                        color: 'white',\n                        borderRadius: '.5rem',\n                        alignItems: 'center',\n                      }}\n                    >\n                      {name}\n                    </Button>\n                  ))}\n                </Box>\n              </Box>\n            )}\n          </Box>\n        </Box>\n\n        <Box\n          sx={{\n            fontWeight: 'semibold',\n            marginTop: '2.5rem',\n            maxWidth: { xs: '24ch', lg: '36ch' },\n            textAlign: 'center',\n            fontSize: { xs: '1.25rem', lg: '1.75rem' },\n          }}\n        >\n          Or, scroll down to view all the Pokemons. Click any card to view it in detail.\n        </Box>\n\n        <PokemonGrid pokemons={pokemonList} loadItems={handleFetch} loading={loading} />\n\n        {error && !loading && (\n          <Suspense\n            fallback={\n              <Box paddingY={6}>\n                <Spinner />\n              </Box>\n            }\n          >\n            <ErrorToast message={error} />\n          </Suspense>\n        )}\n      </Box>\n    </Fragment>\n  )\n}\n\nexport default HomePage\n","import axios from 'axios'\nimport get from 'lodash/get'\n\nexport const searchAction = (url: string) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const response = await axios.get(url)\n\n      const results = get(response, ['data'])\n\n      resolve(results)\n    } catch (err: any) {\n      if (err.response) {\n        // The request was made and the server responded with a status code\n        // that falls out of the range of 2xx\n        console.log(err.response.data)\n        console.log(err.response.status)\n        console.log(err.response.headers)\n      } else if (err.request) {\n        // The request was made but no response was received\n        // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n        // http.ClientRequest in node.js\n        console.log(err.request)\n      } else {\n        // Something happened in setting up the request that triggered an Error\n        console.log('Error', err.message)\n      }\n      console.log(err.config)\n\n      reject(err)\n    }\n  })\n}\n","import axios, { AxiosError, AxiosResponse } from 'axios'\n\nimport { Pokemon } from '../types/pokemon.types'\nimport get from 'lodash/get'\n\ninterface Payload {\n  data: Pokemon[]\n  url: string\n}\n\nexport const fetchPokemonsAction: (url: string | null) => Promise<any> = (url) => {\n  return new Promise((resolve, reject) => {\n    if (url) {\n      axios\n        .get(url)\n        .then((response: AxiosResponse) => {\n          const results = get(response, ['data', 'results'])\n          const nextURL = get(response, ['data', 'next'])\n\n          const requests = results.map((pokemon: Pokemon) => {\n            const pokemonURL = get(pokemon, ['url'])\n            return axios.get(pokemonURL)\n          })\n\n          Promise.all<AxiosResponse>(requests)\n            .then((res) => {\n              const pokemonList = res.map((r) => get(r, ['data']))\n\n              const payload: Payload = {\n                data: pokemonList,\n                url: nextURL,\n              }\n\n              resolve(payload)\n            })\n            .catch((err) => reject(err))\n        })\n        .catch((err: AxiosError) => {\n          if (err.response) {\n            // The request was made and the server responded with a status code\n            // that falls out of the range of 2xx\n            console.log(err.response.data)\n            console.log(err.response.status)\n            console.log(err.response.headers)\n          } else if (err.request) {\n            // The request was made but no response was received\n            // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n            // http.ClientRequest in node.js\n            console.log(err.request)\n          } else {\n            // Something happened in setting up the request that triggered an Error\n            console.log('Error', err.message)\n          }\n          console.log(err.config)\n\n          reject(err)\n        })\n    }\n  })\n}\n\nexport const sortPokemonsAction: (list: Pokemon[], order_by: string) => Pokemon[] = (\n  list,\n  order_by = 'lowest_number_first'\n) => {\n  return list.sort((param1, param2) => {\n    switch (order_by) {\n      case 'lowest_number_first':\n        return param1.id - param2.id\n\n      case 'highest_number_first':\n        return param2.id - param1.id\n\n      case 'z_a':\n        return param2.name.localeCompare(param1.name)\n\n      case 'a_z':\n        return param1.name.localeCompare(param2.name)\n\n      default:\n        return param1.id - param2.id\n    }\n  })\n}\n"],"names":["persistAtom","recoilPersist","searchQueriesState","atom","key","default","effects","PokemonGrid","lazy","ErrorToast","HomePage","t","useTranslation","navigate","useNavigate","dispatch","useDispatch","anchorRef","useRef","query","setQuery","useState","searchError","setSearchError","searching","setSearching","searchQueries","setSearchQueries","useRecoilState","search","url","Promise","async","resolve","reject","response","axios","get","err","console","log","data","status","headers","request","message","config","searchAction","concat","toLowerCase","then","res","type","SEARCH_SUCCESS","payload","prev","catch","SEARCH_ERROR","pokemonList","error","loading","useSelector","state","pokedex","handleFetch","useCallback","FETCH_POKEDEX_REQUEST","results","nextURL","requests","map","pokemon","pokemonURL","all","r","fetchPokemonsAction","FETCH_POKEDEX_SUCCESS","FETCH_POKEDEX_ERROR","useEffect","isEmpty","_jsx","Fragment","children","_jsxs","Box","sx","display","flexDirection","flex","alignItems","gap","fontSize","xs","lg","maxWidth","fontWeight","textAlign","paddingX","ref","position","TextField","id","placeholder","variant","backgroundColor","borderRadius","width","onChange","e","target","value","onKeyDown","shiftKey","preventDefault","stopPropagation","FormLabel","color","bottom","Button","disabled","onClick","padding","flexWrap","justifyContent","Object","keys","name","index","marginTop","pokemons","loadItems","Suspense","fallback","paddingY","Spinner"],"sourceRoot":""}
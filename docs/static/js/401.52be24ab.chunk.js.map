{"version":3,"file":"static/js/401.52be24ab.chunk.js","mappings":"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","sources":["app/components/DataTableBox/index.tsx","app/components/EvolutionBox/index.tsx","app/components/FlavorTextBox/index.tsx","app/components/SpriteBox/index.tsx","app/components/StatsBox/index.tsx","app/components/PokemonDetails/index.tsx","utils/index.ts"],"sourcesContent":["import React from 'react'\nimport get from 'lodash/get'\nimport upperCase from 'lodash/upperCase'\nimport { useTranslation } from 'react-i18next'\n\ninterface IProps {\n  height: number\n  weight: number\n  abilities: Object[]\n  shape: string\n}\n\nconst DataTableBox: React.FC<IProps> = (props) => {\n  const { height, weight, abilities, shape } = props\n  const { t } = useTranslation(['common'])\n\n  return (\n    <div>\n      <table>\n        <div>\n          <div>\n            <div>\n              <div>{t('common:abilities')}</div>\n            </div>\n            <div>\n              <div>\n                {abilities.map((ability) => {\n                  const abilityName = upperCase(get(ability, ['ability', 'name']))\n                  return (\n                    <div\n                      key={abilityName}\n                      //text={`${abilityName}`}\n                      //position=\"middle\"\n                    />\n                  )\n                })}\n              </div>\n            </div>\n          </div>\n          <div>\n            <div>\n              <div>{t('common:height')}</div>\n            </div>\n            <div>\n              <div>{height} m</div>\n            </div>\n          </div>\n          <div>\n            <div>\n              <div>{t('common:weight')}</div>\n            </div>\n            <div>\n              <div>{weight} Kg</div>\n            </div>\n          </div>\n          <div>\n            <div>\n              <div>{t('common:shape')}</div>\n            </div>\n            <div>\n              <div>{shape}</div>\n            </div>\n          </div>\n        </div>\n      </table>\n    </div>\n  )\n}\n\nexport default DataTableBox\n","import { Avatar, Box } from '@mui/material'\n\nimport React from 'react'\nimport RouterLink from '../RouterLink'\nimport capitalize from 'lodash/capitalize'\nimport get from 'lodash/get'\nimport isEmpty from 'lodash/isEmpty'\nimport { useTranslation } from 'react-i18next'\n\ninterface IProps {\n  evolutionChain: Object\n}\n\nconst EvolutionBox: React.FunctionComponent<IProps> = (props) => {\n  const { evolutionChain } = props\n  const { t } = useTranslation(['common'])\n\n  const idRegEx = /[0-9]+/g\n\n  const species = get(evolutionChain, ['chain', 'species', 'name'])\n  const speciesURL = get(evolutionChain, ['chain', 'species', 'url'])\n\n  const speciesID = speciesURL.match(idRegEx)\n\n  const speciesImage = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${speciesID[1]}.png`\n\n  const evolvesToList = get(evolutionChain, ['chain', 'evolves_to'], [])\n\n  const evolvesToEvolvesToList = evolvesToList.map((evolutions: any) =>\n    get(evolutions, ['evolves_to'])\n  )\n\n  return (\n    // <Box margin={1} rounding={2} borderStyle=\"sm\">\n    <Box>\n      <Box padding={3}>\n        <div>{t('common:evolution-chain')}</div>\n      </Box>\n      <Box\n      // display=\"flex\"\n      // direction=\"row\"\n      // paddingX={1}\n      // paddingY={2}\n      // justifyContent=\"around\"\n      // alignItems=\"center\"\n      >\n        <div>\n          <RouterLink to={`/pokemon/${species}/`} hoverStyle=\"none\" accessibilityLabel={species}>\n            <Box\n            // margin={1}\n            // rounding={2}\n            // borderStyle=\"sm\"\n            // display=\"flex\"\n            // alignItems=\"center\"\n            >\n              <Box padding={2}>\n                <Avatar />\n                {/* <Avatar name={species} src={speciesImage} size=\"sm\" /> */}\n              </Box>\n              <Box flex=\"grow\" padding={2}>\n                <div>{capitalize(species)}</div>\n              </Box>\n            </Box>\n          </RouterLink>\n        </div>\n        {!isEmpty(evolvesToList) && (\n          <div>\n            {evolvesToList.map((evolution: any) => {\n              const evolutionName = get(evolution, ['species', 'name'])\n              const evolutionURL = get(evolution, ['species', 'url'])\n              const evolutionID = evolutionURL.match(idRegEx)\n              const evolutionImage = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${evolutionID[1]}.png`\n\n              return (\n                <RouterLink\n                  key={evolutionName}\n                  to={`/pokemon/${evolutionName}/`}\n                  hoverStyle=\"none\"\n                  accessibilityLabel={evolutionName}\n                >\n                  <Box\n                  // margin={1}\n                  // key={evolutionName}\n                  // rounding={2}\n                  // borderStyle=\"sm\"\n                  // display=\"flex\"\n                  // alignItems=\"center\"\n                  >\n                    <Box padding={2}>\n                      <Avatar\n                      // name={evolutionName}\n                      // src={evolutionImage}\n                      // size=\"sm\"\n                      />\n                      <Avatar />\n                    </Box>\n                    <Box flex=\"grow\" padding={2}>\n                      <div>{capitalize(evolutionName)}</div>\n                    </Box>\n                  </Box>\n                </RouterLink>\n              )\n            })}\n          </div>\n        )}\n        {!isEmpty(evolvesToEvolvesToList[0]) && (\n          <div>\n            {evolvesToEvolvesToList.map((evolutions: any) => {\n              return evolutions.map((evolution: any) => {\n                const evolutionName = get(evolution, ['species', 'name'])\n                const evolutionURL = get(evolution, ['species', 'url'])\n                const evolutionID = evolutionURL.match(idRegEx)\n                const evolutionImage = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${evolutionID[1]}.png`\n\n                return (\n                  <RouterLink\n                    key={evolutionName}\n                    to={`/pokemon/${evolutionName}/`}\n                    hoverStyle=\"none\"\n                    accessibilityLabel={evolutionName}\n                  >\n                    <Box\n                    // margin={1}\n                    // rounding={2}\n                    // borderStyle=\"sm\"\n                    // display=\"flex\"\n                    // alignItems=\"center\"\n                    >\n                      <Box padding={2}>\n                        <Avatar\n                        // name={evolutionName}\n                        // src={evolutionImage}\n                        // size=\"sm\"\n                        />\n                        <Avatar />\n                      </Box>\n                      <Box flex=\"grow\" padding={2}>\n                        <div>{capitalize(evolutionName)}</div>\n                      </Box>\n                    </Box>\n                  </RouterLink>\n                )\n              })\n            })}\n          </div>\n        )}\n      </Box>\n    </Box>\n  )\n}\n\nexport default EvolutionBox\n","import { Box } from '@mui/material'\nimport React from 'react'\n\ninterface IProps {\n  flavorText: string\n}\n\nconst FlavorTextBox: React.FunctionComponent<IProps> = (props) => {\n  const { flavorText } = props\n\n  return (\n    <>\n      <Box\n        sx={{ margin: '0.24rem', borderRadius: '.5rem', paddingX: '0.35rem', paddingY: '0.45rem' }}\n      >\n        <div>{flavorText}</div>\n      </Box>\n    </>\n  )\n}\n\nexport default FlavorTextBox\n","import { Box } from '@mui/material'\n\nimport React from 'react'\n\ninterface IProps {\n  id: string | number\n  name: string\n}\n\nconst SpriteBox: React.FunctionComponent<IProps> = (props) => {\n  const { id, name } = props\n  const [itemIndex, setItemIndex] = React.useState(0)\n\n  const normaSpriteFront = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${id}.png`\n  const normaSpriteBack = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/back/${id}.png`\n  const shinySpriteFront = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/shiny/${id}.png`\n  const shinySpriteBack = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/back/shiny/${id}.png`\n\n  // const segmentedControlProps: SegmentedControlProps = {\n  //   items: ['Normal', 'Shiny'],\n  //   selectedItemIndex: itemIndex,\n  //   onChange: ({activeIndex}) => setItemIndex(activeIndex),\n  // }\n\n  return (\n    // <Box margin={1} padding={2} rounding={2} borderStyle=\"sm\">\n    <Box>\n      {itemIndex === 0 ? (\n        <Box padding={3} display=\"flex\" justifyContent=\"around\">\n          {/* <Column span={4}>\n            <Avatar name={`${name}-normal-front`} src={normaSpriteFront} />\n          </Column>\n          <Column span={4}>\n            <Avatar name={`${name}-normal-back`} src={normaSpriteBack} />\n          </Column> */}\n        </Box>\n      ) : (\n        <Box padding={3} display=\"flex\" justifyContent=\"around\">\n          {/* <Column span={4}>\n            <Avatar name={`${name}-shiny-front`} src={shinySpriteFront} />\n          </Column>\n          <Column span={4}>\n            <Avatar name={`${name}-shiny-back`} src={shinySpriteBack} />\n          </Column> */}\n        </Box>\n      )}\n      {/* <SegmentedControl {...segmentedControlProps} /> */}\n    </Box>\n  )\n}\n\nexport default SpriteBox\n","import { Box } from '@mui/material'\n\nimport React from 'react'\nimport get from 'lodash/get'\nimport upperCase from 'lodash/upperCase'\n\ninterface IProps {\n  stats: object[]\n}\n\nconst StatsBox: React.FunctionComponent<IProps> = (props) => {\n  const { stats } = props\n  return (\n    // <Box margin={1} rounding={2} borderStyle=\"sm\">\n    <Box>\n      {stats.map((stat) => {\n        const statName = upperCase(get(stat, ['stat', 'name']))\n        const baseStat = get(stat, ['base_stat'])\n\n        return (\n          <Box\n            key={statName}\n            margin={2}\n            padding={2}\n            display=\"flex\"\n            justifyContent=\"between\"\n            alignItems=\"stretch\"\n          >\n            <Box paddingX={3}>\n              <div>{statName}</div>\n            </Box>\n\n            <Box paddingX={3}>\n              {/* <Tooltip inline text={baseStat}>\n                <progress\n                  className=\"progress is-primary\"\n                  value={baseStat}\n                  max=\"300\"\n                >\n                  {baseStat}%\n                </progress>\n              </Tooltip> */}\n            </Box>\n          </Box>\n        )\n      })}\n    </Box>\n  )\n}\n\nexport default StatsBox\n","import { Avatar, Box, Divider } from '@mui/material'\n\nimport DataTableBox from '../DataTableBox'\nimport EvolutionBox from '../EvolutionBox'\nimport FlavorTextBox from '../FlavorTextBox'\nimport { Pokemon } from '../../types/pokemon.types'\nimport React from 'react'\nimport SpriteBox from '../SpriteBox'\nimport StatsBox from '../StatsBox'\nimport capitalize from 'lodash/capitalize'\nimport find from 'lodash/find'\nimport get from 'lodash/get'\nimport { pokemonIDGenerator } from '../../../utils'\nimport upperCase from 'lodash/upperCase'\nimport { useTranslation } from 'react-i18next'\n\ninterface IProps {\n  pokemon: Pokemon\n}\n\nconst PokemonDetails: React.FC<IProps> = (props) => {\n  const { pokemon } = props\n  const { t } = useTranslation(['common'])\n\n  const name = capitalize(get(pokemon, ['name']))\n  const frontDefaultSprite = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${get(\n    pokemon,\n    ['id']\n  )}.png`\n  const image =\n    get(pokemon, ['sprites', 'other', 'official-artwork', 'front_default']) || frontDefaultSprite\n  const id = get(pokemon, ['id'])\n  const pokemonID = pokemonIDGenerator(id)\n  const height = get(pokemon, ['height']) / 10\n  const weight = get(pokemon, ['weight']) / 10\n  const abilities = get(pokemon, ['abilities'])\n  const types = get(pokemon, ['types'])\n  const flavorTextEntries = get(pokemon, ['species', 'flavor_text_entries'])\n  const blueEntry = find(flavorTextEntries, { language: { name: 'en' } })\n  const flavorText = get(blueEntry, ['flavor_text'])\n  const stats = get(pokemon, ['stats'])\n  const shape = upperCase(get(pokemon, ['species', 'shape', 'name']))\n  const isBaby = get(pokemon, ['species', 'is_baby'])\n  const isLegendary = get(pokemon, ['species', 'is_legendary'])\n  const isMythical = get(pokemon, ['species', 'is_mythical'])\n\n  const evolutionChain = get(pokemon, ['species', 'evolution_chain'])\n\n  const url = `https://pokeapi.co/api/v2/pokemon/${name}`\n\n  return (\n    <>\n      {/* <Box margin={1} rounding={2} borderStyle=\"sm\"> */}\n      <Box>\n        <Box display=\"flex\" alignItems=\"center\" padding={3}>\n          <Box paddingX={2}>\n            {/* <Avatar name={name} src={frontDefaultSprite} size=\"md\" /> */}\n            <Avatar />\n          </Box>\n\n          <Box paddingX={2} flex=\"grow\">\n            <div>\n              {name}{' '}\n              {/* {(isBaby || isLegendary || isMythical) && (\n                <Badge\n                  text={`${isBaby ? t('common:baby') : ''}${\n                    isLegendary ? t('common:legendary') : ''\n                  }${isMythical ? t('common:mythical') : ''}`}\n                  position=\"top\"\n                />\n              )} */}\n            </div>\n            <div>#{pokemonID}</div>\n          </Box>\n        </Box>\n\n        <Divider />\n\n        {/* <Image\n          alt={name}\n          src={image}\n          naturalWidth={475}\n          naturalHeight={475}\n          color=\"rgba(0, 0, 0, 0.04)\"\n        /> */}\n\n        <Divider />\n\n        <Box paddingX={3} paddingY={2} display=\"flex\" justifyContent=\"around\" alignItems=\"center\">\n          {types.map((item: object) => {\n            const pokemonType = get(item, ['type', 'name'])\n\n            return (\n              <span key={pokemonType} className={pokemonType}>\n                {pokemonType}\n              </span>\n            )\n          })}\n        </Box>\n      </Box>\n\n      <FlavorTextBox flavorText={flavorText} />\n\n      <SpriteBox id={id} name={name} />\n\n      <DataTableBox height={height} weight={weight} abilities={abilities} shape={shape} />\n\n      <StatsBox stats={stats} />\n\n      <EvolutionBox evolutionChain={evolutionChain} />\n    </>\n  )\n}\n\nexport default PokemonDetails\n","// Pokemon ID Generator\nexport const pokemonIDGenerator = (id: number) => {\n  const idString = `${id}`\n\n  const filler = '000'\n\n  return filler.substring(0, filler.length - idString.length) + idString\n}\n\n// Handle HTTP Errors\nexport const handleErrors = (err: any) => {\n  let errorMessage = {}\n\n  if (err.response) {\n    // The request was made and the server responded with a status code\n    if (err.response.status === 400) {\n      errorMessage = {\n        message: 'bad-request',\n        status: 400,\n      }\n    } else if (err.response.status === 401) {\n      errorMessage = {\n        message: 'unauthorized',\n        status: 401,\n      }\n    } else if (err.response.status === 403) {\n      errorMessage = {\n        message: 'forbidden',\n        status: 403,\n      }\n    } else if (err.response.status === 404) {\n      errorMessage = {\n        message: 'not-found',\n        status: 404,\n      }\n    } else if (err.response.status === 405) {\n      errorMessage = {\n        message: 'method-not-allowed',\n        status: 405,\n      }\n    } else if (err.response.status === 500) {\n      errorMessage = {\n        message: 'internal-server-error',\n        status: 500,\n      }\n    } else {\n      errorMessage = {\n        message: 'something-went-wrong',\n        status: 500,\n      }\n    }\n  } else {\n    errorMessage = {\n      message: 'something-went-wrong',\n      status: 500,\n    }\n  }\n\n  return errorMessage\n}\n"],"names":["props","height","weight","abilities","shape","t","useTranslation","_jsx","children","_jsxs","map","ability","abilityName","upperCase","get","evolutionChain","idRegEx","species","speciesID","match","evolvesToList","concat","evolvesToEvolvesToList","evolutions","Box","padding","RouterLink","to","hoverStyle","accessibilityLabel","Avatar","flex","capitalize","isEmpty","evolution","evolutionName","evolutionID","flavorText","_Fragment","sx","margin","borderRadius","paddingX","paddingY","id","name","itemIndex","setItemIndex","React","display","justifyContent","stats","stat","statName","alignItems","pokemon","frontDefaultSprite","pokemonID","pokemonIDGenerator","types","flavorTextEntries","blueEntry","find","language","Divider","item","pokemonType","className","FlavorTextBox","SpriteBox","DataTableBox","StatsBox","EvolutionBox","idString","substring","filler","length"],"sourceRoot":""}